#! /bin/bash

#-> SEARCH FOR STRING WITHIN FILES LOCATED IN THE CURRENT DIRECTORY, OR OPTIONALLY A SPECIFIED DIRECTORY
#-> TAKES TWO STRINGS AS ARGS, IN STRICT ORDER
#->   - OPTIONAL: PATH TO SEARCH UNDER
#->   - REQUIRED: STRING TO SEARCH FOR
#-> RETURNS ERROR CODE OF GREP, WHICH SHOULD BE 0 FOR FOUND STRING AND 1 FOR STRING NOT FOUND

#-> CHECK IF THERE ARE NO ARGS, AND SHOW HELP IF SO
#shellcheck disable=SC2199
if [[ -z "${@+x}" ]] ; then
	cat << EndOfMessage
Search within the files of a given directory for a given string, or the current directory if no directory is given.
The -l|--files-with-matches argument, if provided, will be passed to grep to produce a clean list of file names containing the match.
Usage examples:
	$0 mystring
	$0 /var/log mystring
	$0 "my string with spaces"
	$0 -l /var/log mystring
EndOfMessage
	exit 1
fi

while :; do
	case $1 in
		"-l"|"--files-with-matches")
			args="${args} --verbose"
			GREP_ARGS="${GREP_ARGS} --files-with-matches"
		;;
		"-i"|"--ignore-case")
			GREP_ARGS="${GREP_ARGS} --ignore-case"
		;;
		--*|-*)
			echo "Invalid argument ($1) provided."
			exit 1
		;;
		*)
			break
		;;
	esac
	shift
done

#-> CHECK IF THERE'S TWO (IMPLIED: OR MORE) ARGS
if [[ -n "${2+x}" ]] ; then
	#-> IF THERE IS, CHECK IF THE FIRST ARG EXISTS AS A DIRECTORY
	if [ -d "${1}" ]; then
		path="${1}"
		shift
	else
		if [ -f "${1}" ]; then
			path="${1}"
			shift
		else
			echo "Invalid file or directory specified."
			exit 1
		fi
	fi
else
	path=.
fi

#shellcheck disable=SC2124
STR=${@}

if [ -d "${path}" ]; then
	find "${path}" -type f -print0 | xargs -0 grep --color=always "${GREP_ARGS}" "${STR}"
fi

if [ -f "${path}" ]; then
	#shellcheck disable=SC2002
	cat "${path}" | grep --color=always "${GREP_ARGS}" "${STR}"
fi

exit $?
